/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WormholeRelayerMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deliver"
      | "getRegisteredWormholeRelayerContract"
      | "register"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Delivery"): EventFragment;

  encodeFunctionData(functionFragment: "deliver", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRegisteredWormholeRelayerContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredWormholeRelayerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export namespace DeliveryEvent {
  export type InputTuple = [timestamp: BigNumberish, sequence: BigNumberish];
  export type OutputTuple = [timestamp: bigint, sequence: bigint];
  export interface OutputObject {
    timestamp: bigint;
    sequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WormholeRelayerMock extends BaseContract {
  connect(runner?: ContractRunner | null): WormholeRelayerMock;
  waitForDeployment(): Promise<this>;

  interface: WormholeRelayerMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deliver: TypedContractMethod<[message: BytesLike], [void], "payable">;

  getRegisteredWormholeRelayerContract: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    "view"
  >;

  register: TypedContractMethod<
    [chainId: BigNumberish, wormholeRelayer: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deliver"
  ): TypedContractMethod<[message: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "getRegisteredWormholeRelayerContract"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [chainId: BigNumberish, wormholeRelayer: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Delivery"
  ): TypedContractEvent<
    DeliveryEvent.InputTuple,
    DeliveryEvent.OutputTuple,
    DeliveryEvent.OutputObject
  >;

  filters: {
    "Delivery(uint32,uint64)": TypedContractEvent<
      DeliveryEvent.InputTuple,
      DeliveryEvent.OutputTuple,
      DeliveryEvent.OutputObject
    >;
    Delivery: TypedContractEvent<
      DeliveryEvent.InputTuple,
      DeliveryEvent.OutputTuple,
      DeliveryEvent.OutputObject
    >;
  };
}
